name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      folder:
        description: 'Select the folder to run'
        required: true
        type: choice
        options:
          - 'modules/AWS'
          - 'modules/Azure'
          - 'modules/GCP'
      subfolder:
        description: "select a AWS folder name (only if available):"
        required: false
        type: choice
        options:
          - EMR_service
          - ECR
          - IBM_WAS_AWS
          - Workspaces

  push:
    branches: [ "main" ]
  pull_request:


permissions:
  contents: read


jobs:

  validate-and-run:
    runs-on: ubuntu-latest
    steps:
      - name: Validate subfolder selection
        run: |
          echo "module selected: ${{ github.event.inputs.folder }}"
          echo "subfolder selected: ${{ github.event.inputs.subfolder }}"

          if [[ "${{ github.event.inputs.folder }}" != "modules/AWS" && "${{ github.event.inputs.subfolder }}" != "" ]]; then
            echo "ERROR: Subfolder should only be selected if folder is 'modules/AWS'"
            exit 1
          fi
      - name: Proceed if modules/AWS and subfolder are set
        if: ${{ github.event.inputs.folder == 'modules/AWS' && github.event.inputs.subfolder != '' }}
        run: |
          echo "Running workflow for modules/AWS -> subfolder: ${{ github.event.inputs.subfolder }}"

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production


    # Use the Bash shell regardless whether the GitHub Actions workflow runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash


    steps:
    # Checkout the repository to the GitHub Actions workflow runner
    - name: Checkout
      uses: actions/checkout@v4


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ${{ github.event.inputs.folder }}
      run: terraform init


    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ${{ github.event.inputs.folder }}
      run: terraform fmt -check


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ${{ github.event.inputs.folder }}
      run: terraform plan -input=false


      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status status check in your repository for "Terraform Cloud". See the documentation on "strict" required status status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event.inputs.folder != ''
      working-directory: ${{ github.event.inputs.folder }}
      run: terraform apply -auto-approve -input=false